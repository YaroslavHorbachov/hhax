//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class CatClientService {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : '';
  }

  /**
   * Get a list of breeds
   * @param limit (optional) limit the amount of results returned
   * @return successful operation
   */
  getBreeds(limit: number | undefined): Observable<Breed[]> {
    let url_ = this.baseUrl + '/breeds?';
    if (limit === null) throw new Error("The parameter 'limit' cannot be null.");
    else if (limit !== undefined) url_ += 'limit=' + encodeURIComponent('' + limit) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetBreeds(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetBreeds(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<Breed[]>;
            }
          } else return _observableThrow(response_) as any as Observable<Breed[]>;
        })
      );
  }

  protected processGetBreeds(response: HttpResponseBase): Observable<Breed[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          result200 = _responseText === '' ? null : (JSON.parse(_responseText, this.jsonParseReviver) as Breed[]);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException('An unexpected server error occurred.', status, _responseText, _headers);
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * Get Random Fact
   * @param max_length (optional) maximum length of returned fact
   * @return successful operation
   */
  getRandomFact(max_length: number | undefined): Observable<CatFact> {
    let url_ = this.baseUrl + '/fact?';
    if (max_length === null) throw new Error("The parameter 'max_length' cannot be null.");
    else if (max_length !== undefined) url_ += 'max_length=' + encodeURIComponent('' + max_length) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetRandomFact(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetRandomFact(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<CatFact>;
            }
          } else return _observableThrow(response_) as any as Observable<CatFact>;
        })
      );
  }

  protected processGetRandomFact(response: HttpResponseBase): Observable<CatFact> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          result200 = _responseText === '' ? null : (JSON.parse(_responseText, this.jsonParseReviver) as CatFact);
          return _observableOf(result200);
        })
      );
    } else if (status === 404) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException('Fact not found', status, _responseText, _headers);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException('An unexpected server error occurred.', status, _responseText, _headers);
        })
      );
    }
    return _observableOf(null as any);
  }

  /**
   * Get a list of facts
   * @param max_length (optional) maximum length of returned fact
   * @param limit (optional) limit the amount of results returned
   * @return successful operation
   */
  getFacts(max_length: number | undefined, limit: number | undefined): Observable<CatFact[]> {
    let url_ = this.baseUrl + '/facts?';
    if (max_length === null) throw new Error("The parameter 'max_length' cannot be null.");
    else if (max_length !== undefined) url_ += 'max_length=' + encodeURIComponent('' + max_length) + '&';
    if (limit === null) throw new Error("The parameter 'limit' cannot be null.");
    else if (limit !== undefined) url_ += 'limit=' + encodeURIComponent('' + limit) + '&';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetFacts(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetFacts(response_ as any);
            } catch (e) {
              return _observableThrow(e) as any as Observable<CatFact[]>;
            }
          } else return _observableThrow(response_) as any as Observable<CatFact[]>;
        })
      );
  }

  protected processGetFacts(response: HttpResponseBase): Observable<CatFact[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          result200 = _responseText === '' ? null : (JSON.parse(_responseText, this.jsonParseReviver) as CatFact[]);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException('An unexpected server error occurred.', status, _responseText, _headers);
        })
      );
    }
    return _observableOf(null as any);
  }
}

/** Breed */
export interface Breed {
  /** Breed */
  breed?: string;
  /** Country */
  country?: string;
  /** Origin */
  origin?: string;
  /** Coat */
  coat?: string;
  /** Pattern */
  pattern?: string;
}

/** CatFact */
export interface CatFact {
  /** Fact */
  fact?: string;
  /** Length */
  length?: number;
}

export class ApiException extends Error {
  override message: string;
  status: number;
  response: string;
  headers: { [key: string]: any };
  result: any;

  constructor(message: string, status: number, response: string, headers: { [key: string]: any }, result: any) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
    return obj.isApiException === true;
  }
}

function throwException(
  message: string,
  status: number,
  response: string,
  headers: { [key: string]: any },
  result?: any
): Observable<any> {
  if (result !== null && result !== undefined) return _observableThrow(result);
  else return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
  return new Observable<string>((observer: any) => {
    if (!blob) {
      observer.next('');
      observer.complete();
    } else {
      let reader = new FileReader();
      reader.onload = (event) => {
        observer.next((event.target as any).result);
        observer.complete();
      };
      reader.readAsText(blob);
    }
  });
}
